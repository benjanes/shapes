class Polyline{constructor(t=[],s,i={}){this.points=t,this.ctx=s,this.curvePoints=this.points.length?this.getCurvePoints(i.isClosed,i.tension||.5,i.numSegments||16):[]}setCtx(t){this.ctx=t}draw(t={}){this.drawLines(this.getCurvePoints(t.isClosed,t.tension||.5,t.numSegments||16),t.rgb||"0,0,0",t.scale)}getCurvePoints(t,s,i){let e=[...this.points];const h=[];e.unshift(this.points[0]),e.push(this.points[this.points.length-1]);for(let t=1;t<e.length-2;t++){if(this.curvePoints)return this.curvePoints;for(let o=0;o<=i;o++){const n=(e[t+1].x-e[t-1].x)*s,r=(e[t+2].x-e[t].x)*s,a=(e[t+1].y-e[t-1].y)*s,c=(e[t+2].y-e[t].y)*s,x=o/i,l=2*Math.pow(x,3)-3*Math.pow(x,2)+1,p=-2*Math.pow(x,3)+3*Math.pow(x,2),u=Math.pow(x,3)-2*Math.pow(x,2)+x,y=Math.pow(x,3)-Math.pow(x,2),g=l*e[t].x+p*e[t+1].x+u*n+y*r,w=l*e[t].y+p*e[t+1].y+u*a+y*c;h.push({...e[t],x:g,y:w})}}return h.map((t,s,i)=>{const e=i.length-1,h=s?i[s-1]:i[e],o=s!==e?i[s+1]:i[0],n=o.x-h.x,r=o.y-h.y;return{...t,normal:Math.atan2(r,n)+Math.PI/2}})}drawLines(t,s,i){this.ctx.strokeStyle=`rgb(${s},${t[0].opacity.toFixed(3)})`,this.ctx.lineWidth=t[0].lineWidth,this.ctx.beginPath(),this.ctx.moveTo(t[0].x*i,t[0].y*i),t.slice(1).forEach(({x:t,y:s})=>this.ctx.lineTo(t*i,s*i)),this.ctx.stroke(),this.ctx.closePath()}}